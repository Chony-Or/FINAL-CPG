
import java.awt.*;
import java.awt.Image;
import javax.swing.*;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author chony
 */
public class AIRLINE extends javax.swing.JFrame {
int d;
    String Classhold = "";
    float AirFare;
    float PRBUSTransPFee = 550;
    float REGTransPFee = 255;
    
    
    // counter for the seats of the airline 
    int holder;
    int regMB = 47;
    int regMBcount = 0;
    int priMB = 13;
    int priMBcount = 0;
    int busMB = 22;
    int busMBcount = 0;
    int regBM = 47;
    int regBMcount = 0;
    int priBM = 13;
    int priBMcount = 0;
    int busBM = 22; 
    int busBMcount = 0; 
    
    int regMP = 47; 
    int regMPcount = 0;
    int priMP = 13;
    int priMPcount = 0;
    int busMP = 22; 
    int busMPcount = 0;
    int regPM = 47; 
    int regPMcount = 0;
    int priPM = 13;
    int priPMcount = 0;
    int busPM = 22; 
    int busPMcount = 0;
    
    int regMS = 47; 
    int regMScount = 0;
    int priMS = 13;
    int priMScount = 0;
    int busMS = 22;
    int busMScount = 0;
    int regSM = 47;
    int regSMcount = 0;
    int priSM = 13;
    int priSMcount = 0;
    int busSM = 22;
    int busSMcount = 0;
    
    int regMJ = 47;
    int regMJcount = 0;
    int priMJ = 13;
    int priMJcount = 0;
    int busMJ = 22;
    int busMJcount = 0;
    int regJM = 47;
    int regJMcount = 0;
    int priJM = 13;
    int priJMcount = 0;
    int busJM = 22;
    int busJMcount = 0;
    
    int regMV = 47;
    int regMVcount = 0;
    int priMV = 13;
    int priMVcount = 0;
    int busMV = 22;
    int busMVcount = 0;
    int regVM = 47;
    int regVMcount = 0;
    int priVM = 13;
    int priVMcount = 0;
    int busVM = 22;
    int busVMcount = 0;
   
    
   
    
    public AIRLINE() {
        initComponents();
        scaleImage();
        scaleImagemap();
        scaleImagbarcodeV();
        scaleImagbarcodeH();
    }
     public void scaleImage()
    {
        ImageIcon icon = new ImageIcon("C:\\Users\\chony\\Desktop\\CHONY ONLINE CLASS\\(1) SECOND SEM\\CPG 2\\FINAL PROJECT\\img\\BACKGROUND.jpg");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        jLabel1.setIcon(scaledIcon);
    }
     public void scaleImagemap()
    {
        ImageIcon icon = new ImageIcon("C:\\Users\\chony\\Desktop\\CHONY ONLINE CLASS\\(1) SECOND SEM\\CPG 2\\FINAL PROJECT\\img\\2worldmap.jpg");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(jLabel29.getWidth(), jLabel29.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        jLabel29.setIcon(scaledIcon);
    }
      public void scaleImagbarcodeV()
    {
        ImageIcon icon = new ImageIcon("C:\\Users\\chony\\Desktop\\CHONY ONLINE CLASS\\(1) SECOND SEM\\CPG 2\\FINAL PROJECT\\img\\barcodeV.png");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(barcodeV.getWidth(), barcodeV.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        barcodeV.setIcon(scaledIcon);
    }
      public void scaleImagbarcodeH()
    {
        ImageIcon icon = new ImageIcon("C:\\Users\\chony\\Desktop\\CHONY ONLINE CLASS\\(1) SECOND SEM\\CPG 2\\FINAL PROJECT\\img\\barHorizontal.png");
        Image img = icon.getImage();
        Image imgScale = img.getScaledInstance(barcodeH.getWidth(), barcodeH.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        barcodeH.setIcon(scaledIcon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        MAINPanel = new javax.swing.JPanel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Panel3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        DestinationPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        faretext = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        PassengerPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        classbox = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        namebox = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        agebox = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        TransactionPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jPanel2 = new RoundedPanel(50,new Color(102,153,255));
        jPanel3 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        FlightcodeLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        FlightcodeLabel1 = new javax.swing.JLabel();
        barcodeV = new javax.swing.JLabel();
        barcodeH = new javax.swing.JLabel();
        passname = new javax.swing.JLabel();
        typeFlight = new javax.swing.JLabel();
        destinationL = new javax.swing.JLabel();
        timelabel = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        passname1 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        typeFlight1 = new javax.swing.JLabel();
        seat1 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        seat2 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        typeFlight4 = new javax.swing.JLabel();
        typeFlight5 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        PassengerPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        classbox1 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        namebox1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        agebox1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(906, 485));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(906, 485));

        MAINPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));
        MAINPanel.setMaximumSize(new java.awt.Dimension(906, 485));
        MAINPanel.setMinimumSize(new java.awt.Dimension(906, 485));
        MAINPanel.setPreferredSize(new java.awt.Dimension(906, 485));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setOpaque(true);

        jPanel1.setOpaque(false);

        jButton7.setBackground(new java.awt.Color(246, 175, 38));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton7.setText("Next");
        jButton7.setBorderPainted(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(246, 175, 38));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton6.setText("Exit");
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Sylfaen", 1, 36)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("UIX INTERNATIONAL");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(345, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        jLayeredPane3.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout MAINPanelLayout = new javax.swing.GroupLayout(MAINPanel);
        MAINPanel.setLayout(MAINPanelLayout);
        MAINPanelLayout.setHorizontalGroup(
            MAINPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane3)
        );
        MAINPanelLayout.setVerticalGroup(
            MAINPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane3)
        );

        jButton1.setText("Panel1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Panel3.setText("jButton3");
        Panel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Panel3ActionPerformed(evt);
            }
        });

        jButton2.setText("Panel2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        DestinationPanel.setBackground(new java.awt.Color(102, 102, 102));
        DestinationPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DestinationPanel.setMaximumSize(new java.awt.Dimension(906, 485));
        DestinationPanel.setMinimumSize(new java.awt.Dimension(906, 485));
        DestinationPanel.setPreferredSize(new java.awt.Dimension(906, 485));

        jTable2.setBackground(new java.awt.Color(0, 0, 0));
        jTable2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable2.setForeground(new java.awt.Color(204, 204, 204));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1","Manila", "Batanes","   ","8,000.00","12,500.00","3,500.00"},
                {"2","Batanes", "Manila","   ","9,800.00","12,950.00","3,900.00"},
                {"3","Manila", "Palawan","   ","9,100.00","10,500.00","3,200.00"},
                {"4","Palawan", "Manila","   ","9,850.00","10,975.00","3,575.00"},
                {"5","Manila", "South Korea","   ","27,450.00","37,390.00","12,055.00"},
                {"6","South Korea", "Manila","   ","30,890.00","39,650.00","13,100.00"},
                {"7","Manila", "Japan","   ","40,450.00","45,355.00","27,800.00"},
                {"8","Japan", "Manila","   ","43,855.00","49,780.00","29,400.00"},
                {"9","Manila", "Vietnam","   ","8,505.00","12,345.00","3,200.00"},
                {"10","Vietnam", "Manila","   ","14,300.00","16,320.00","4,600.00"}
            },
            new String [] {
                "Option", "From", "To", "Travel Type", "Private Class fare", "Business Class fare", "Regular Class fare"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("PRICE:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("AIRPLANE CLASS:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jButton5.setBackground(new java.awt.Color(246, 175, 38));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("NEXT");
        jButton5.setBorderPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(246, 175, 38));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("BACK");
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jComboBox1AncestorMoved(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("SELECT OPTION:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("DESTINATION");

        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "REGULAR CLASS", "PRIVATE CLASS", "BUSINESS CLASS", " " }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        faretext.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        faretext.setForeground(new java.awt.Color(204, 204, 204));
        faretext.setText("jLabel10");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText(".");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("AVAILABLE SEATS:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 204, 204));
        jLabel11.setText("jLabel11");

        javax.swing.GroupLayout DestinationPanelLayout = new javax.swing.GroupLayout(DestinationPanel);
        DestinationPanel.setLayout(DestinationPanelLayout);
        DestinationPanelLayout.setHorizontalGroup(
            DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DestinationPanelLayout.createSequentialGroup()
                .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155)
                        .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, DestinationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel11))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, DestinationPanelLayout.createSequentialGroup()
                                .addGap(88, 88, 88)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(faretext, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
            .addGroup(DestinationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(DestinationPanelLayout.createSequentialGroup()
                .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addGap(353, 353, 353)
                        .addComponent(jLabel2))
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DestinationPanelLayout.createSequentialGroup()
                    .addGap(452, 452, 452)
                    .addComponent(jLabel5)
                    .addContainerGap(452, Short.MAX_VALUE)))
        );
        DestinationPanelLayout.setVerticalGroup(
            DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DestinationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(21, 21, 21)
                .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DestinationPanelLayout.createSequentialGroup()
                        .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DestinationPanelLayout.createSequentialGroup()
                        .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DestinationPanelLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(faretext)))
                            .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel11)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 55, Short.MAX_VALUE))
            .addGroup(DestinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(DestinationPanelLayout.createSequentialGroup()
                    .addGap(243, 243, 243)
                    .addComponent(jLabel5)
                    .addContainerGap(272, Short.MAX_VALUE)))
        );

        PassengerPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));
        PassengerPanel1.setMaximumSize(new java.awt.Dimension(906, 485));
        PassengerPanel1.setMinimumSize(new java.awt.Dimension(906, 485));
        PassengerPanel1.setPreferredSize(new java.awt.Dimension(906, 485));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("PASSENGER INFORMATION");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("AIRPLANE CLASS: ");
        jLabel9.setToolTipText("");

        classbox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        classbox.setText("jLabel10");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("NAME:");

        namebox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        namebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameboxActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("AGE:");

        agebox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agebox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageboxActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Additional Transaction Processing Fee of PHP 550.00 pesos per transaction  (for Private and Business Class). ");

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("NEXT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton8.setText("BACK");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Regular class transaction processing fee is PHP255.00.");

        javax.swing.GroupLayout PassengerPanel1Layout = new javax.swing.GroupLayout(PassengerPanel1);
        PassengerPanel1.setLayout(PassengerPanel1Layout);
        PassengerPanel1Layout.setHorizontalGroup(
            PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PassengerPanel1Layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(245, 245, 245))
            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PassengerPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15))
                .addGap(27, 27, 27)
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agebox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namebox, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(classbox, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
            .addGroup(PassengerPanel1Layout.createSequentialGroup()
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PassengerPanel1Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PassengerPanel1Layout.createSequentialGroup()
                        .addGap(361, 361, 361)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PassengerPanel1Layout.setVerticalGroup(
            PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PassengerPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel9)
                    .addComponent(classbox))
                .addGap(27, 27, 27)
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(agebox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(PassengerPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton3))
                .addGap(31, 31, 31))
        );

        TransactionPanel.setMaximumSize(new java.awt.Dimension(906, 485));
        TransactionPanel.setMinimumSize(new java.awt.Dimension(906, 485));
        TransactionPanel.setPreferredSize(new java.awt.Dimension(906, 485));

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel24.setText("TRANSACTION");

        jLayeredPane2.setPreferredSize(new java.awt.Dimension(820, 335));

        jPanel2.setForeground(new java.awt.Color(102, 153, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel29.setBackground(new java.awt.Color(255, 255, 255));
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(260, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
        );

        FlightcodeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FlightcodeLabel.setForeground(new java.awt.Color(255, 255, 255));
        FlightcodeLabel.setText("TYPE OF FLIGHT");

        nameLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("NAME OF PASSENGER");

        FlightcodeLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FlightcodeLabel1.setForeground(new java.awt.Color(255, 255, 255));
        FlightcodeLabel1.setText("SEAT");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(nameLabel)
                .addGap(63, 63, 63)
                .addComponent(FlightcodeLabel)
                .addGap(59, 59, 59)
                .addComponent(FlightcodeLabel1)
                .addContainerGap(320, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(FlightcodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FlightcodeLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        passname.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        passname.setText("CHONY OR");

        typeFlight.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        typeFlight.setText("CLASS");

        destinationL.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        destinationL.setText("MANILA TO VIETNAM");

        timelabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timelabel.setForeground(new java.awt.Color(255, 0, 0));
        timelabel.setText("BORDING TIME");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel30.setText("07:30");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel31.setText("GATE CLOSES 40 MINUTES BEFORE DEPARTURE");
        jLabel31.setToolTipText("");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(204, 204, 204));
        jLabel32.setText("NAME OF PASSENGER");

        jTextField3.setBackground(new java.awt.Color(153, 153, 153));
        jTextField3.setMinimumSize(new java.awt.Dimension(4, 20));
        jTextField3.setPreferredSize(new java.awt.Dimension(4, 20));

        passname1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        passname1.setText("CHONY OR");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(204, 204, 204));
        jLabel33.setText("TYPE OF FLIGHT");

        typeFlight1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        typeFlight1.setText("CLASS");

        seat1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        seat1.setText("1");
        seat1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(204, 204, 204));
        jLabel34.setText("SEAT");

        seat2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        seat2.setText("12");
        seat2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(204, 204, 204));
        jLabel35.setText("DATE");

        typeFlight4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        typeFlight4.setText("01/06/2021");

        typeFlight5.setFont(new java.awt.Font("Yu Gothic Medium", 1, 24)); // NOI18N
        typeFlight5.setText("MSB001");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(204, 204, 204));
        jLabel36.setText("FLIGHT");

        jLayeredPane2.setLayer(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(barcodeV, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(barcodeH, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(passname, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(typeFlight, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(destinationL, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(timelabel, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel30, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel31, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel32, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jTextField3, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(passname1, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel33, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(typeFlight1, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(seat1, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel34, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(seat2, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel35, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(typeFlight4, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(typeFlight5, javax.swing.JLayeredPane.POPUP_LAYER);
        jLayeredPane2.setLayer(jLabel36, javax.swing.JLayeredPane.POPUP_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(barcodeV, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(jLabel31))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jLabel30))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(timelabel))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationL, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addComponent(passname1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(typeFlight1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(seat1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barcodeH, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passname)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel36)
                            .addComponent(typeFlight5, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel35)
                                    .addComponent(typeFlight4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel34)
                                    .addComponent(seat2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(typeFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barcodeV, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(passname1)
                                    .addComponent(typeFlight1)
                                    .addComponent(seat1))
                                .addGap(45, 45, 45)
                                .addComponent(destinationL)
                                .addGap(39, 39, 39)
                                .addComponent(timelabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel31)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(barcodeH, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addComponent(jLabel32)
                                .addGap(4, 4, 4)
                                .addComponent(passname)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(typeFlight)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel35)
                                    .addComponent(jLabel34))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(typeFlight4)
                                    .addComponent(seat2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel36)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(typeFlight5)
                        .addGap(19, 19, 19))))
            .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(1, 1, 1)))
        );

        javax.swing.GroupLayout TransactionPanelLayout = new javax.swing.GroupLayout(TransactionPanel);
        TransactionPanel.setLayout(TransactionPanelLayout);
        TransactionPanelLayout.setHorizontalGroup(
            TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionPanelLayout.createSequentialGroup()
                .addGap(414, 414, 414)
                .addComponent(jLabel24)
                .addContainerGap(430, Short.MAX_VALUE))
            .addGroup(TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TransactionPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );
        TransactionPanelLayout.setVerticalGroup(
            TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TransactionPanelLayout.createSequentialGroup()
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(510, Short.MAX_VALUE))
            .addGroup(TransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TransactionPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(225, 225, 225)))
        );

        PassengerPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));
        PassengerPanel2.setMaximumSize(new java.awt.Dimension(906, 485));
        PassengerPanel2.setMinimumSize(new java.awt.Dimension(906, 485));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("PASSENGER INFORMATION");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("AIRPLANE CLASS: ");
        jLabel17.setToolTipText("");

        classbox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        classbox1.setText("jLabel10");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("NAME:");

        namebox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        namebox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namebox1ActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("AGE:");

        agebox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agebox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agebox1ActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Additional Transaction Processing Fee of PHP 550.00 pesos per transaction  (for Private and Business Class). ");

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton9.setText("NEXT");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton10.setText("BACK");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("Regular class transaction processing fee is PHP255.00.");

        javax.swing.GroupLayout PassengerPanel2Layout = new javax.swing.GroupLayout(PassengerPanel2);
        PassengerPanel2.setLayout(PassengerPanel2Layout);
        PassengerPanel2Layout.setHorizontalGroup(
            PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PassengerPanel2Layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(245, 245, 245))
            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(PassengerPanel2Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(jLabel20))
                .addGap(27, 27, 27)
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agebox1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(namebox1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(classbox1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
            .addGroup(PassengerPanel2Layout.createSequentialGroup()
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PassengerPanel2Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PassengerPanel2Layout.createSequentialGroup()
                        .addGap(361, 361, 361)
                        .addComponent(jLabel14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PassengerPanel2Layout.setVerticalGroup(
            PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PassengerPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namebox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(classbox1))
                .addGap(27, 27, 27)
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(agebox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111)
                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(PassengerPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton9))
                .addGap(31, 31, 31))
        );

        jLayeredPane1.setLayer(MAINPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Panel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(DestinationPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(PassengerPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(TransactionPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(PassengerPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jButton1)
                .addGap(203, 203, 203)
                .addComponent(jButton2)
                .addGap(149, 149, 149)
                .addComponent(Panel3)
                .addContainerGap(262, Short.MAX_VALUE))
            .addComponent(MAINPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(DestinationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(PassengerPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                .addComponent(PassengerPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(TransactionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(MAINPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 506, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(Panel3))
                .addContainerGap())
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(DestinationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 95, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(PassengerPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(PassengerPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addComponent(TransactionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 94, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    MAINPanel.setVisible(true);
    DestinationPanel.setVisible(false);
    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     DestinationPanel.setVisible(true);
    MAINPanel.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        MAINPanel.setVisible(false);
        PassengerPanel1.setVisible(false);
        TransactionPanel.setVisible(false);
        DestinationPanel.setVisible(true);     
    }//GEN-LAST:event_jButton7ActionPerformed

    private void Panel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Panel3ActionPerformed
        MAINPanel.setVisible(false);
        PassengerPanel1.setVisible(true);     
    }//GEN-LAST:event_Panel3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        Destination dest = new Destination();
        
        String selectedValue = jComboBox1.getSelectedItem().toString();
        
        d = dest.count(Integer.parseInt(selectedValue));
         
        jLabel10.setText(dest.destination[d]);
        
        String selectedClass = jComboBox2.getSelectedItem().toString();
        if (d == 0)
        {
            //MANILA TO BATANES
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMB - priMBcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMB - busMBcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMB - regMBcount;
                jLabel11.setText(String.valueOf(holder));
            }     // TODO add your handling code here:
        }
        if (d == 1) //BATANES TO MANILA
        {
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priBM - priBMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busBM - busBMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regBM - regBMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 2) //MANILA TO PALAWAN
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMP - priMPcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMP - busMPcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMP - regMPcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 3)//PALAWAN TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priPM - priPMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busPM - busPMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regPM - regPMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 4) //MANILA TO SOUTH KOREA
        {
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMS - priMScount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMS - busMScount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMS - regMScount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 5) //SOUTH KOREA TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priSM - priSMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busSM - busSMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regSM - regSMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 6)//MANILA TO JAPAN
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMJ - priMJcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMJ - busMJcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMJ - regMJcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 7)//JAPAN TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priJM - priJMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busJM - busJMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regJM - regJMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 8)//MANILA TO VIETNAM
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMV - priMVcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMV - busVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regVM - regVMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 9)//VIETNAM TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priVM - priVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busVM - busVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regVM - regVMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        
       

        //applied polymorphism
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        // TODO add your handling code hereint number = jTable2.getSelectedRow();
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jComboBox1AncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1AncestorMoved

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        //String query =jComboBox1.getSelectedItem().toString();
        //filter(query);
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
       
        //jTextField1.setText(jTable2.getValueAt(number,1).toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        Destination dest = new Destination();
        String selectedClass = jComboBox2.getSelectedItem().toString();
        classbox.setText(selectedClass);
        if (selectedClass.equals("PRIVATE CLASS"))
        {
            faretext.setText(dest.PrClass[d]);
        }
        if (selectedClass.equals("BUSINESS CLASS"))
        {
            faretext.setText(dest.BClass[d]);
        }
        if (selectedClass.equals("REGULAR CLASS"))
        {
            faretext.setText(dest.RClass[d]);
        }
        
        // TO UPDATE HOLDER
         if (d == 0)
        {
            //MANILA TO BATANES
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMB - priMBcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMB - busMBcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMB - regMBcount;
                jLabel11.setText(String.valueOf(holder));
            }     // TODO add your handling code here:
        }
        if (d == 1) //BATANES TO MANILA
        {
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priBM - priBMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busBM - busBMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regBM - regBMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 2) //MANILA TO PALAWAN
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMP - priMPcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMP - busMPcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMP - regMPcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 3)//PALAWAN TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priPM - priPMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busPM - busPMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regPM - regPMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 4) //MANILA TO SOUTH KOREA
        {
             if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMS - priMScount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMS - busMScount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMS - regMScount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 5) //SOUTH KOREA TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priSM - priSMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busSM - busSMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regSM - regSMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 6)//MANILA TO JAPAN
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMJ - priMJcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMJ - busMJcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regMJ - regMJcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 7)//JAPAN TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priJM - priJMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busJM - busJMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regJM - regJMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 8)//MANILA TO VIETNAM
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priMV - priMVcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busMV - busVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regVM - regVMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        if (d == 9)//VIETNAM TO MANILA
        {
              if (selectedClass.equals("PRIVATE CLASS"))
            {
                faretext.setText(dest.PrClass[d]);
                holder = priVM - priVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("BUSINESS CLASS"))
            {
                faretext.setText(dest.BClass[d]);
                holder = busVM - busVMcount;
                jLabel11.setText(String.valueOf(holder));
            }
            if (selectedClass.equals("REGULAR CLASS"))
            {
                faretext.setText(dest.RClass[d]);
                holder = regVM - regVMcount;
                jLabel11.setText(String.valueOf(holder));
            }   
        }
        //jLabel11.setText(String.valueOf(holder));
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void ageboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageboxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Passenger p= new Passenger();
        Destination dest = new Destination();
        
        if (d==0)//MANILA TO BATANES
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMBp[regMBcount] =namebox.getText();
          p.regMBpclass[regMBcount] =classbox.getText();
          p.regMBpAge[regMBcount] = agebox.getText();
          p.regMBpfare[regMBcount] = faretext.getText();
          
        //name
           passname.setText(p.regMBp[regMBcount]);
           passname1.setText(p.regMBp[regMBcount]);
        //class
           typeFlight.setText(p.regMBpclass[regMBcount]);
           typeFlight1.setText(p.regMBpclass[regMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMBcount;
            seat1.setText(String.valueOf(regMBcount));
            seat2.setText(String.valueOf(regMBcount));
            typeFlight5.setText("MBR00" + String.valueOf(regMBcount));
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMBp[priMBcount] =namebox.getText();
          p.priMBpclass[priMBcount] =classbox.getText();
          p.priMBpAge[priMBcount] = agebox.getText();
          p.priMBpfare[priMBcount] = faretext.getText();
          
          passname.setText(p.priMBp[priMBcount]);
           passname1.setText(p.priMBp[priMBcount]);
        //class
           typeFlight.setText(p.priMBpclass[priMBcount]);
           typeFlight1.setText(p.priMBpclass[priMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMBcount;
            seat1.setText(String.valueOf(priMBcount));
            seat2.setText(String.valueOf(priMBcount));
            typeFlight5.setText("MBP00" + String.valueOf(priMBcount));
          
          
        
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMBp[busMBcount] =namebox.getText();
          p.busMBpclass[busMBcount] =classbox.getText();
          p.busMBpAge[busMBcount] = agebox.getText();
          p.busMBpfare[busMBcount] = faretext.getText();
          
          passname.setText(p.busMBp[busMBcount]);
           passname1.setText(p.busMBp[busMBcount]);
        //class
           typeFlight.setText(p.busMBpclass[busMBcount]);
           typeFlight1.setText(p.busMBpclass[busMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMBcount;
            seat1.setText(String.valueOf(busMBcount));
            seat2.setText(String.valueOf(busMBcount));
            typeFlight5.setText("MBB00" + String.valueOf(busMBcount));
          
          
        
          }
        }
        if (d==1)//BATANES TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regBMp[regBMcount] =namebox.getText();
          p.regBMpclass[regBMcount] =classbox.getText();
          p.regBMpAge[regBMcount] = agebox.getText();
          p.regBMpfare[regBMcount] = faretext.getText();
          
          passname.setText(p.regBMp[regBMcount]);
           passname1.setText(p.regBMp[regBMcount]);
        //class
           typeFlight.setText(p.regBMpclass[regBMcount]);
           typeFlight1.setText(p.regBMpclass[regBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regBMcount;
            seat1.setText(String.valueOf(regBMcount));
            seat2.setText(String.valueOf(regBMcount));
            typeFlight5.setText("BMR00" + String.valueOf(regBMcount));
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priBMp[priBMcount] =namebox.getText();
          p.priBMpclass[priBMcount] =classbox.getText();
          p.priBMpAge[priBMcount] = agebox.getText();
          p.priBMpfare[priBMcount] = faretext.getText();
          
          passname.setText(p.priBMp[priBMcount]);
           passname1.setText(p.priBMp[priBMcount]);
        //class
           typeFlight.setText(p.priBMpclass[priBMcount]);
           typeFlight1.setText(p.priBMpclass[priBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priBMcount;
            seat1.setText(String.valueOf(priBMcount));
            seat2.setText(String.valueOf(priBMcount));
            typeFlight5.setText("BMP00" + String.valueOf(priBMcount));
          
          
          
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busBMp[busBMcount] =namebox.getText();
          p.busBMpclass[busBMcount] =classbox.getText();
          p.busBMpAge[busBMcount] = agebox.getText();
          p.busBMpfare[busBMcount] = faretext.getText();
          
          passname.setText(p.busBMp[busBMcount]);
           passname1.setText(p.busBMp[busBMcount]);
        //class
           typeFlight.setText(p.busBMpclass[busBMcount]);
           typeFlight1.setText(p.busBMpclass[busBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busBMcount;
            seat1.setText(String.valueOf(busBMcount));
            seat2.setText(String.valueOf(busBMcount));
            typeFlight5.setText("BMB00" + String.valueOf(busBMcount));
          }
        }
        
        
        if (d==2) //MANILA TO PALAWAN
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMPp[regMPcount] =namebox.getText();
          p.regMPpclass[regMPcount] =classbox.getText();
          p.regMPpAge[regMPcount] = agebox.getText();
          p.regMPpfare[regMPcount] = faretext.getText();
          
          passname.setText(p.regMPp[regMPcount]);
           passname1.setText(p.regMPp[regMPcount]);
        //class
           typeFlight.setText(p.regMPpclass[regMPcount]);
           typeFlight1.setText(p.regMPpclass[regMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMPcount;
            seat1.setText(String.valueOf(regMPcount));
            seat2.setText(String.valueOf(regMPcount));
            typeFlight5.setText("MPR00" + String.valueOf(regMPcount));
          
          
          
          
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMPp[priMPcount] =namebox.getText();
          p.priMPpclass[priMPcount] =classbox.getText();
          p.priMPpAge[priMPcount] = agebox.getText();
          p.priMPpfare[priMPcount] = faretext.getText();
          
          passname.setText(p.priMPp[priMPcount]);
           passname1.setText(p.priMPp[priMPcount]);
        //class
           typeFlight.setText(p.priMPpclass[priMPcount]);
           typeFlight1.setText(p.priMPpclass[priMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMPcount;
            seat1.setText(String.valueOf(priMPcount));
            seat2.setText(String.valueOf(priMPcount));
            typeFlight5.setText("MPP00" + String.valueOf(priMPcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMPp[busMPcount] =namebox.getText();
          p.busMPpclass[busMPcount] =classbox.getText();
          p.busMPpAge[busMPcount] = agebox.getText();
          p.busMPpfare[busMPcount] = faretext.getText();
          
          passname.setText(p.busMPp[busMPcount]);
           passname1.setText(p.busMPp[busMPcount]);
        //class
           typeFlight.setText(p.busMPpclass[busMPcount]);
           typeFlight1.setText(p.busMPpclass[busMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMPcount;
            seat1.setText(String.valueOf(busMPcount));
            seat2.setText(String.valueOf(busMPcount));
            typeFlight5.setText("MPB00" + String.valueOf(busMPcount));
          }
        }
        if (d==3) //PALAWAN TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regPMp[regPMcount] =namebox.getText();
          p.regPMpclass[regPMcount] =classbox.getText();
          p.regPMpAge[regPMcount] = agebox.getText();
          p.regPMpfare[regPMcount] = faretext.getText();
          
          passname.setText(p.regPMp[regPMcount]);
           passname1.setText(p.regPMp[regPMcount]);
        //class
           typeFlight.setText(p.regPMpclass[regPMcount]);
           typeFlight1.setText(p.regPMpclass[regPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regPMcount;
            seat1.setText(String.valueOf(regPMcount));
            seat2.setText(String.valueOf(regPMcount));
            typeFlight5.setText("PMR00" + String.valueOf(regPMcount));
        
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priPMp[priPMcount] =namebox.getText();
          p.priPMpclass[priPMcount] =classbox.getText();
          p.priPMpAge[priPMcount] = agebox.getText();
          p.priPMpfare[priPMcount] = faretext.getText();
          
          passname.setText(p.priPMp[priPMcount]);
           passname1.setText(p.priPMp[priPMcount]);
        //class
           typeFlight.setText(p.priPMpclass[priPMcount]);
           typeFlight1.setText(p.priPMpclass[priPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priPMcount;
            seat1.setText(String.valueOf(priPMcount));
            seat2.setText(String.valueOf(priPMcount));
            typeFlight5.setText("PMP00" + String.valueOf(priPMcount));
            
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busPMp[busPMcount] =namebox.getText();
          p.busPMpclass[busPMcount] =classbox.getText();
          p.busPMpAge[busPMcount] = agebox.getText();
          p.busPMpfare[busPMcount] = faretext.getText();
          
          passname.setText(p.busPMp[busPMcount]);
           passname1.setText(p.busPMp[busPMcount]);
        //class
           typeFlight.setText(p.busPMpclass[busPMcount]);
           typeFlight1.setText(p.busPMpclass[busPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busPMcount;
            seat1.setText(String.valueOf(busPMcount));
            seat2.setText(String.valueOf(busPMcount));
            typeFlight5.setText("PMB00" + String.valueOf(busPMcount));
          }
        }
        if (d==4) //MANILA TO SOUTH KOREA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMSp[regMScount] =namebox.getText();
          p.regMSpclass[regMScount] =classbox.getText();
          p.regMSpAge[regMScount] = agebox.getText();
           p.regMSpfare[regMScount] = faretext.getText();
          
          passname.setText(p.regMSp[regMScount]);
           passname1.setText(p.regMSp[regMScount]);
        //class
           typeFlight.setText(p.regMSpclass[regMScount]);
           typeFlight1.setText(p.regMSpclass[regMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMScount;
            seat1.setText(String.valueOf(regMScount));
            seat2.setText(String.valueOf(regMScount));
            typeFlight5.setText("MSR00" + String.valueOf(regMScount));
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMSp[priMScount] =namebox.getText();
          p.priMSpclass[priMScount] =classbox.getText();
          p.priMSpAge[priMScount] = agebox.getText();
          p.priMSpfare[priMScount] = faretext.getText();
          
          passname.setText(p.priMSp[priMScount]);
           passname1.setText(p.priMSp[priMScount]);
        //class
           typeFlight.setText(p.priMSpclass[priMScount]);
           typeFlight1.setText(p.priMSpclass[priMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMScount;
            seat1.setText(String.valueOf(priMScount));
            seat2.setText(String.valueOf(priMScount));
            typeFlight5.setText("MSP00" + String.valueOf(priMScount));
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMSp[busMScount] =namebox.getText();
          p.busMSpclass[busMScount] =classbox.getText();
          p.busMSpAge[busMScount] = agebox.getText();
           p.busMSpfare[busMScount] = faretext.getText();
          
          passname.setText(p.busMSp[busMScount]);
           passname1.setText(p.busMSp[busMScount]);
        //class
           typeFlight.setText(p.busMSpclass[busMScount]);
           typeFlight1.setText(p.busMSpclass[busMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMScount;
            seat1.setText(String.valueOf(busMScount));
            seat2.setText(String.valueOf(busMScount));
            typeFlight5.setText("MSB00" + String.valueOf(busMScount));
          }
        }
        if (d==5) //SOUTH KOREA TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regSMp[regSMcount] =namebox.getText();
          p.regSMpclass[regSMcount] =classbox.getText();
          p.regSMpAge[regSMcount] = agebox.getText();
          p.regSMpfare[regSMcount] = faretext.getText();
          
          passname.setText(p.regSMp[regSMcount]);
           passname1.setText(p.regSMp[regSMcount]);
        //class
           typeFlight.setText(p.regSMpclass[regSMcount]);
           typeFlight1.setText(p.regSMpclass[regSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regSMcount;
            seat1.setText(String.valueOf(regSMcount));
            seat2.setText(String.valueOf(regSMcount));
            typeFlight5.setText("SMR00" + String.valueOf(regSMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priSMp[priSMcount] =namebox.getText();
          p.priSMpclass[priSMcount] =classbox.getText();
          p.priSMpAge[priSMcount] = agebox.getText();
          p.priSMpfare[priSMcount] = faretext.getText();
          
          passname.setText(p.priSMp[priSMcount]);
           passname1.setText(p.priSMp[priSMcount]);
        //class
           typeFlight.setText(p.priSMpclass[priSMcount]);
           typeFlight1.setText(p.priSMpclass[priSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priSMcount;
            seat1.setText(String.valueOf(priSMcount));
            seat2.setText(String.valueOf(priSMcount));
            typeFlight5.setText("SMP00" + String.valueOf(priSMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busSMp[busSMcount] =namebox.getText();
          p.busSMpclass[busSMcount] =classbox.getText();
          p.busSMpAge[busSMcount] = agebox.getText();
          p.busSMpfare[busSMcount] = faretext.getText();
          
          passname.setText(p.busSMp[busSMcount]);
           passname1.setText(p.busSMp[busSMcount]);
        //class
           typeFlight.setText(p.busSMpclass[busSMcount]);
           typeFlight1.setText(p.busSMpclass[busSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busSMcount;
            seat1.setText(String.valueOf(busSMcount));
            seat2.setText(String.valueOf(busSMcount));
            typeFlight5.setText("SMB00" + String.valueOf(busSMcount));
          
          
          }
        }
        if (d==6) //MANILA TO JAPAN
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMJp[regMJcount] =namebox.getText();
          p.regMJpclass[regMJcount] =classbox.getText();
          p.regMJpAge[regMJcount] = agebox.getText();
          p.regMJpfare[regMJcount] = faretext.getText();
          
          passname.setText(p.regMJp[regMJcount]);
           passname1.setText(p.regMJp[regMJcount]);
        //class
           typeFlight.setText(p.regMJpclass[regMJcount]);
           typeFlight1.setText(p.regMJpclass[regMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMJcount;
            seat1.setText(String.valueOf(regMJcount));
            seat2.setText(String.valueOf(regMJcount));
            typeFlight5.setText("MJR00" + String.valueOf(regMJcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMJp[priMJcount] =namebox.getText();
          p.priMJpclass[priMJcount] =classbox.getText();
          p.priMJpAge[priMJcount] = agebox.getText();
          p.priMJpfare[priMJcount] = faretext.getText();
          
          passname.setText(p.priMJp[priMJcount]);
           passname1.setText(p.priMJp[priMJcount]);
        //class
           typeFlight.setText(p.priMJpclass[priMJcount]);
           typeFlight1.setText(p.priMJpclass[priMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMJcount;
            seat1.setText(String.valueOf(priMJcount));
            seat2.setText(String.valueOf(priMJcount));
            typeFlight5.setText("MJP00" + String.valueOf(priMJcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMJp[busMJcount] =namebox.getText();
          p.busMJpclass[busMJcount] =classbox.getText();
          p.busMJpAge[busMJcount] = agebox.getText();
          p.busMJpfare[busMJcount] = faretext.getText();
          
          passname.setText(p.busMJp[busMJcount]);
           passname1.setText(p.busMJp[busMJcount]);
        //class
           typeFlight.setText(p.busMJpclass[busMJcount]);
           typeFlight1.setText(p.busMJpclass[busMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMJcount;
            seat1.setText(String.valueOf(busMJcount));
            seat2.setText(String.valueOf(busMJcount));
            typeFlight5.setText("MJB00" + String.valueOf(busMJcount));
          
          
          }
        }
        if (d==7) //JAPAN TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regJMp[regJMcount] =namebox.getText();
          p.regJMpclass[regJMcount] =classbox.getText();
          p.regJMpAge[regJMcount] = agebox.getText();
          p.regJMpfare[regJMcount] = faretext.getText();
          
          passname.setText(p.regJMp[regJMcount]);
           passname1.setText(p.regJMp[regJMcount]);
        //class
           typeFlight.setText(p.regJMpclass[regJMcount]);
           typeFlight1.setText(p.regJMpclass[regJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regJMcount;
            seat1.setText(String.valueOf(regJMcount));
            seat2.setText(String.valueOf(regJMcount));
            typeFlight5.setText("JMR00" + String.valueOf(regJMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priJMp[priJMcount] =namebox.getText();
          p.priJMpclass[priJMcount] =classbox.getText();
          p.priJMpAge[priJMcount] = agebox.getText();
          p.priJMpfare[priJMcount] = faretext.getText();
          
          passname.setText(p.priJMp[priJMcount]);
           passname1.setText(p.priJMp[priJMcount]);
        //class
           typeFlight.setText(p.priJMpclass[priJMcount]);
           typeFlight1.setText(p.priJMpclass[priJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priJMcount;
            seat1.setText(String.valueOf(priJMcount));
            seat2.setText(String.valueOf(priJMcount));
            typeFlight5.setText("JMP00" + String.valueOf(priJMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busJMp[busJMcount] =namebox.getText();
          p.busJMpclass[busJMcount] =classbox.getText();
          p.busJMpAge[busJMcount] = agebox.getText();
          p.busJMpfare[busJMcount] = faretext.getText();
          
          passname.setText(p.busJMp[busJMcount]);
           passname1.setText(p.busJMp[busJMcount]);
        //class
           typeFlight.setText(p.busJMpclass[busJMcount]);
           typeFlight1.setText(p.busJMpclass[busJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busJMcount;
            seat1.setText(String.valueOf(busJMcount));
            seat2.setText(String.valueOf(busJMcount));
            typeFlight5.setText("JMB00" + String.valueOf(busJMcount));
          
          
          }
        }
        if (d==8) //MANILA TO VIETNAM
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMVp[regMVcount] =namebox.getText();
          p.regMVpclass[regMVcount] =classbox.getText();
          p.regMVpAge[regMVcount] = agebox.getText();
          p.regMVpfare[regMVcount] = faretext.getText();
          
          passname.setText(p.regMVp[regMVcount]);
           passname1.setText(p.regMVp[regMVcount]);
        //class
           typeFlight.setText(p.regMVpclass[regMVcount]);
           typeFlight1.setText(p.regMVpclass[regMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMVcount;
            seat1.setText(String.valueOf(regMVcount));
            seat2.setText(String.valueOf(regMVcount));
            typeFlight5.setText("MVR00" + String.valueOf(regMVcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMVp[priMVcount] =namebox.getText();
          p.priMVpclass[priMVcount] =classbox.getText();
          p.priMVpAge[priMVcount] = agebox.getText();
          p.priMVpfare[priMVcount] = faretext.getText();
          
          passname.setText(p.priMVp[priMVcount]);
           passname1.setText(p.priMVp[priMVcount]);
        //class
           typeFlight.setText(p.priMVpclass[priMVcount]);
           typeFlight1.setText(p.priMVpclass[priMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMVcount;
            seat1.setText(String.valueOf(priMVcount));
            seat2.setText(String.valueOf(priMVcount));
            typeFlight5.setText("MVP00" + String.valueOf(priMVcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMVp[busMVcount] =namebox.getText();
          p.busMVpclass[busMVcount] =classbox.getText();
          p.busMVpAge[busMVcount] = agebox.getText();
          p.busMVpfare[busMVcount] = faretext.getText();
          
          passname.setText(p.busMVp[busMVcount]);
           passname1.setText(p.busMVp[busMVcount]);
        //class
           typeFlight.setText(p.busMVpclass[busMVcount]);
           typeFlight1.setText(p.busMVpclass[busMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMVcount;
            seat1.setText(String.valueOf(busMVcount));
            seat2.setText(String.valueOf(busMVcount));
            typeFlight5.setText("MVB00" + String.valueOf(busMVcount));
          
          
          }
        }
        if (d==9) //VIETNAM TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regVMp[regVMcount] =namebox.getText();
          p.regVMpclass[regVMcount] =classbox.getText();
          p.regVMpAge[regVMcount] = agebox.getText();
          p.regVMpfare[regVMcount] = faretext.getText();
          
          passname.setText(p.regVMp[regVMcount]);
           passname1.setText(p.regVMp[regVMcount]);
        //class
           typeFlight.setText(p.regVMpclass[regVMcount]);
           typeFlight1.setText(p.regVMpclass[regVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regVMcount;
            seat1.setText(String.valueOf(regVMcount));
            seat2.setText(String.valueOf(regVMcount));
            typeFlight5.setText("VMR00" + String.valueOf(regVMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priVMp[priVMcount] =namebox.getText();
          p.priVMpclass[priVMcount] =classbox.getText();
          p.priVMpAge[priVMcount] = agebox.getText();
          p.priVMpfare[priVMcount] = faretext.getText();
          
          passname.setText(p.priVMp[priVMcount]);
           passname1.setText(p.priVMp[priVMcount]);
        //class
           typeFlight.setText(p.priVMpclass[priVMcount]);
           typeFlight1.setText(p.priVMpclass[priVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priVMcount;
            seat1.setText(String.valueOf(priVMcount));
            seat2.setText(String.valueOf(priVMcount));
            typeFlight5.setText("VMP00" + String.valueOf(priVMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busVMp[busVMcount] =namebox.getText();
          p.busVMpclass[busVMcount] =classbox.getText();
          p.busVMpAge[busVMcount] = agebox.getText();
          p.busVMpfare[busVMcount] = faretext.getText();
          
          passname.setText(p.busVMp[busVMcount]);
           passname1.setText(p.busVMp[busVMcount]);
        //class
           typeFlight.setText(p.busVMpclass[busVMcount]);
           typeFlight1.setText(p.busVMpclass[busVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busVMcount;
            seat1.setText(String.valueOf(busVMcount));
            seat2.setText(String.valueOf(busVMcount));
            typeFlight5.setText("VMB00" + String.valueOf(busVMcount));
          
          
          }
        }
        
     
        MAINPanel.setVisible(false);
        PassengerPanel1.setVisible(false);
        DestinationPanel.setVisible(false); 
        TransactionPanel.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        MAINPanel.setVisible(false);
        PassengerPanel1.setVisible(false);
        TransactionPanel.setVisible(false);
        DestinationPanel.setVisible(true);         // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void nameboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameboxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MAINPanel.setVisible(true);
        PassengerPanel1.setVisible(false);
        TransactionPanel.setVisible(false);
        DestinationPanel.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        MAINPanel.setVisible(false);
        TransactionPanel.setVisible(false);
        DestinationPanel.setVisible(false);
        PassengerPanel1.setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void namebox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namebox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namebox1ActionPerformed

    private void agebox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agebox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agebox1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        int value = JOptionPane.showConfirmDialog(this,"Would you like to avail Baggage?");
        
        if (value == 0){
            System.out.println ("Yes");
        }
        else{
            System.out.println ("No");
        }
        
        Passenger p= new Passenger();
        Destination dest = new Destination();
        
        if (d==0)//MANILA TO BATANES
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMBp[regMBcount] =namebox.getText();
          p.regMBpclass[regMBcount] =classbox.getText();
          p.regMBpAge[regMBcount] = agebox.getText();
          p.regMBpfare[regMBcount] = faretext.getText();
          
        //name
           passname.setText(p.regMBp[regMBcount]);
           passname1.setText(p.regMBp[regMBcount]);
        //class
           typeFlight.setText(p.regMBpclass[regMBcount]);
           typeFlight1.setText(p.regMBpclass[regMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMBcount;
            seat1.setText(String.valueOf(regMBcount));
            seat2.setText(String.valueOf(regMBcount));
            typeFlight5.setText("MBR00" + String.valueOf(regMBcount));
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMBp[priMBcount] =namebox.getText();
          p.priMBpclass[priMBcount] =classbox.getText();
          p.priMBpAge[priMBcount] = agebox.getText();
          p.priMBpfare[priMBcount] = faretext.getText();
          
          passname.setText(p.priMBp[priMBcount]);
           passname1.setText(p.priMBp[priMBcount]);
        //class
           typeFlight.setText(p.priMBpclass[priMBcount]);
           typeFlight1.setText(p.priMBpclass[priMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMBcount;
            seat1.setText(String.valueOf(priMBcount));
            seat2.setText(String.valueOf(priMBcount));
            typeFlight5.setText("MBP00" + String.valueOf(priMBcount));
          
          
        
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMBp[busMBcount] =namebox.getText();
          p.busMBpclass[busMBcount] =classbox.getText();
          p.busMBpAge[busMBcount] = agebox.getText();
          p.busMBpfare[busMBcount] = faretext.getText();
          
          passname.setText(p.busMBp[busMBcount]);
           passname1.setText(p.busMBp[busMBcount]);
        //class
           typeFlight.setText(p.busMBpclass[busMBcount]);
           typeFlight1.setText(p.busMBpclass[busMBcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMBcount;
            seat1.setText(String.valueOf(busMBcount));
            seat2.setText(String.valueOf(busMBcount));
            typeFlight5.setText("MBB00" + String.valueOf(busMBcount));
          
          
        
          }
        }
        if (d==1)//BATANES TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regBMp[regBMcount] =namebox.getText();
          p.regBMpclass[regBMcount] =classbox.getText();
          p.regBMpAge[regBMcount] = agebox.getText();
          p.regBMpfare[regBMcount] = faretext.getText();
          
          passname.setText(p.regBMp[regBMcount]);
           passname1.setText(p.regBMp[regBMcount]);
        //class
           typeFlight.setText(p.regBMpclass[regBMcount]);
           typeFlight1.setText(p.regBMpclass[regBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regBMcount;
            seat1.setText(String.valueOf(regBMcount));
            seat2.setText(String.valueOf(regBMcount));
            typeFlight5.setText("BMR00" + String.valueOf(regBMcount));
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priBMp[priBMcount] =namebox.getText();
          p.priBMpclass[priBMcount] =classbox.getText();
          p.priBMpAge[priBMcount] = agebox.getText();
          p.priBMpfare[priBMcount] = faretext.getText();
          
          passname.setText(p.priBMp[priBMcount]);
           passname1.setText(p.priBMp[priBMcount]);
        //class
           typeFlight.setText(p.priBMpclass[priBMcount]);
           typeFlight1.setText(p.priBMpclass[priBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priBMcount;
            seat1.setText(String.valueOf(priBMcount));
            seat2.setText(String.valueOf(priBMcount));
            typeFlight5.setText("BMP00" + String.valueOf(priBMcount));
          
          
          
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busBMp[busBMcount] =namebox.getText();
          p.busBMpclass[busBMcount] =classbox.getText();
          p.busBMpAge[busBMcount] = agebox.getText();
          p.busBMpfare[busBMcount] = faretext.getText();
          
          passname.setText(p.busBMp[busBMcount]);
           passname1.setText(p.busBMp[busBMcount]);
        //class
           typeFlight.setText(p.busBMpclass[busBMcount]);
           typeFlight1.setText(p.busBMpclass[busBMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busBMcount;
            seat1.setText(String.valueOf(busBMcount));
            seat2.setText(String.valueOf(busBMcount));
            typeFlight5.setText("BMB00" + String.valueOf(busBMcount));
          }
        }
        
        
        if (d==2) //MANILA TO PALAWAN
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMPp[regMPcount] =namebox.getText();
          p.regMPpclass[regMPcount] =classbox.getText();
          p.regMPpAge[regMPcount] = agebox.getText();
          p.regMPpfare[regMPcount] = faretext.getText();
          
          passname.setText(p.regMPp[regMPcount]);
           passname1.setText(p.regMPp[regMPcount]);
        //class
           typeFlight.setText(p.regMPpclass[regMPcount]);
           typeFlight1.setText(p.regMPpclass[regMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMPcount;
            seat1.setText(String.valueOf(regMPcount));
            seat2.setText(String.valueOf(regMPcount));
            typeFlight5.setText("MPR00" + String.valueOf(regMPcount));
          
          
          
          
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMPp[priMPcount] =namebox.getText();
          p.priMPpclass[priMPcount] =classbox.getText();
          p.priMPpAge[priMPcount] = agebox.getText();
          p.priMPpfare[priMPcount] = faretext.getText();
          
          passname.setText(p.priMPp[priMPcount]);
           passname1.setText(p.priMPp[priMPcount]);
        //class
           typeFlight.setText(p.priMPpclass[priMPcount]);
           typeFlight1.setText(p.priMPpclass[priMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMPcount;
            seat1.setText(String.valueOf(priMPcount));
            seat2.setText(String.valueOf(priMPcount));
            typeFlight5.setText("MPP00" + String.valueOf(priMPcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMPp[busMPcount] =namebox.getText();
          p.busMPpclass[busMPcount] =classbox.getText();
          p.busMPpAge[busMPcount] = agebox.getText();
          p.busMPpfare[busMPcount] = faretext.getText();
          
          passname.setText(p.busMPp[busMPcount]);
           passname1.setText(p.busMPp[busMPcount]);
        //class
           typeFlight.setText(p.busMPpclass[busMPcount]);
           typeFlight1.setText(p.busMPpclass[busMPcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMPcount;
            seat1.setText(String.valueOf(busMPcount));
            seat2.setText(String.valueOf(busMPcount));
            typeFlight5.setText("MPB00" + String.valueOf(busMPcount));
          }
        }
        if (d==3) //PALAWAN TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regPMp[regPMcount] =namebox.getText();
          p.regPMpclass[regPMcount] =classbox.getText();
          p.regPMpAge[regPMcount] = agebox.getText();
          p.regPMpfare[regPMcount] = faretext.getText();
          
          passname.setText(p.regPMp[regPMcount]);
           passname1.setText(p.regPMp[regPMcount]);
        //class
           typeFlight.setText(p.regPMpclass[regPMcount]);
           typeFlight1.setText(p.regPMpclass[regPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regPMcount;
            seat1.setText(String.valueOf(regPMcount));
            seat2.setText(String.valueOf(regPMcount));
            typeFlight5.setText("PMR00" + String.valueOf(regPMcount));
        
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priPMp[priPMcount] =namebox.getText();
          p.priPMpclass[priPMcount] =classbox.getText();
          p.priPMpAge[priPMcount] = agebox.getText();
          p.priPMpfare[priPMcount] = faretext.getText();
          
          passname.setText(p.priPMp[priPMcount]);
           passname1.setText(p.priPMp[priPMcount]);
        //class
           typeFlight.setText(p.priPMpclass[priPMcount]);
           typeFlight1.setText(p.priPMpclass[priPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priPMcount;
            seat1.setText(String.valueOf(priPMcount));
            seat2.setText(String.valueOf(priPMcount));
            typeFlight5.setText("PMP00" + String.valueOf(priPMcount));
            
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busPMp[busPMcount] =namebox.getText();
          p.busPMpclass[busPMcount] =classbox.getText();
          p.busPMpAge[busPMcount] = agebox.getText();
          p.busPMpfare[busPMcount] = faretext.getText();
          
          passname.setText(p.busPMp[busPMcount]);
           passname1.setText(p.busPMp[busPMcount]);
        //class
           typeFlight.setText(p.busPMpclass[busPMcount]);
           typeFlight1.setText(p.busPMpclass[busPMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busPMcount;
            seat1.setText(String.valueOf(busPMcount));
            seat2.setText(String.valueOf(busPMcount));
            typeFlight5.setText("PMB00" + String.valueOf(busPMcount));
          }
        }
        if (d==4) //MANILA TO SOUTH KOREA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMSp[regMScount] =namebox.getText();
          p.regMSpclass[regMScount] =classbox.getText();
          p.regMSpAge[regMScount] = agebox.getText();
           p.regMSpfare[regMScount] = faretext.getText();
          
          passname.setText(p.regMSp[regMScount]);
           passname1.setText(p.regMSp[regMScount]);
        //class
           typeFlight.setText(p.regMSpclass[regMScount]);
           typeFlight1.setText(p.regMSpclass[regMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMScount;
            seat1.setText(String.valueOf(regMScount));
            seat2.setText(String.valueOf(regMScount));
            typeFlight5.setText("MSR00" + String.valueOf(regMScount));
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMSp[priMScount] =namebox.getText();
          p.priMSpclass[priMScount] =classbox.getText();
          p.priMSpAge[priMScount] = agebox.getText();
          p.priMSpfare[priMScount] = faretext.getText();
          
          passname.setText(p.priMSp[priMScount]);
           passname1.setText(p.priMSp[priMScount]);
        //class
           typeFlight.setText(p.priMSpclass[priMScount]);
           typeFlight1.setText(p.priMSpclass[priMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMScount;
            seat1.setText(String.valueOf(priMScount));
            seat2.setText(String.valueOf(priMScount));
            typeFlight5.setText("MSP00" + String.valueOf(priMScount));
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMSp[busMScount] =namebox.getText();
          p.busMSpclass[busMScount] =classbox.getText();
          p.busMSpAge[busMScount] = agebox.getText();
           p.busMSpfare[busMScount] = faretext.getText();
          
          passname.setText(p.busMSp[busMScount]);
           passname1.setText(p.busMSp[busMScount]);
        //class
           typeFlight.setText(p.busMSpclass[busMScount]);
           typeFlight1.setText(p.busMSpclass[busMScount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMScount;
            seat1.setText(String.valueOf(busMScount));
            seat2.setText(String.valueOf(busMScount));
            typeFlight5.setText("MSB00" + String.valueOf(busMScount));
          }
        }
        if (d==5) //SOUTH KOREA TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regSMp[regSMcount] =namebox.getText();
          p.regSMpclass[regSMcount] =classbox.getText();
          p.regSMpAge[regSMcount] = agebox.getText();
          p.regSMpfare[regSMcount] = faretext.getText();
          
          passname.setText(p.regSMp[regSMcount]);
           passname1.setText(p.regSMp[regSMcount]);
        //class
           typeFlight.setText(p.regSMpclass[regSMcount]);
           typeFlight1.setText(p.regSMpclass[regSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regSMcount;
            seat1.setText(String.valueOf(regSMcount));
            seat2.setText(String.valueOf(regSMcount));
            typeFlight5.setText("SMR00" + String.valueOf(regSMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priSMp[priSMcount] =namebox.getText();
          p.priSMpclass[priSMcount] =classbox.getText();
          p.priSMpAge[priSMcount] = agebox.getText();
          p.priSMpfare[priSMcount] = faretext.getText();
          
          passname.setText(p.priSMp[priSMcount]);
           passname1.setText(p.priSMp[priSMcount]);
        //class
           typeFlight.setText(p.priSMpclass[priSMcount]);
           typeFlight1.setText(p.priSMpclass[priSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priSMcount;
            seat1.setText(String.valueOf(priSMcount));
            seat2.setText(String.valueOf(priSMcount));
            typeFlight5.setText("SMP00" + String.valueOf(priSMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busSMp[busSMcount] =namebox.getText();
          p.busSMpclass[busSMcount] =classbox.getText();
          p.busSMpAge[busSMcount] = agebox.getText();
          p.busSMpfare[busSMcount] = faretext.getText();
          
          passname.setText(p.busSMp[busSMcount]);
           passname1.setText(p.busSMp[busSMcount]);
        //class
           typeFlight.setText(p.busSMpclass[busSMcount]);
           typeFlight1.setText(p.busSMpclass[busSMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busSMcount;
            seat1.setText(String.valueOf(busSMcount));
            seat2.setText(String.valueOf(busSMcount));
            typeFlight5.setText("SMB00" + String.valueOf(busSMcount));
          
          
          }
        }
        if (d==6) //MANILA TO JAPAN
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMJp[regMJcount] =namebox.getText();
          p.regMJpclass[regMJcount] =classbox.getText();
          p.regMJpAge[regMJcount] = agebox.getText();
          p.regMJpfare[regMJcount] = faretext.getText();
          
          passname.setText(p.regMJp[regMJcount]);
           passname1.setText(p.regMJp[regMJcount]);
        //class
           typeFlight.setText(p.regMJpclass[regMJcount]);
           typeFlight1.setText(p.regMJpclass[regMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMJcount;
            seat1.setText(String.valueOf(regMJcount));
            seat2.setText(String.valueOf(regMJcount));
            typeFlight5.setText("MJR00" + String.valueOf(regMJcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMJp[priMJcount] =namebox.getText();
          p.priMJpclass[priMJcount] =classbox.getText();
          p.priMJpAge[priMJcount] = agebox.getText();
          p.priMJpfare[priMJcount] = faretext.getText();
          
          passname.setText(p.priMJp[priMJcount]);
           passname1.setText(p.priMJp[priMJcount]);
        //class
           typeFlight.setText(p.priMJpclass[priMJcount]);
           typeFlight1.setText(p.priMJpclass[priMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMJcount;
            seat1.setText(String.valueOf(priMJcount));
            seat2.setText(String.valueOf(priMJcount));
            typeFlight5.setText("MJP00" + String.valueOf(priMJcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMJp[busMJcount] =namebox.getText();
          p.busMJpclass[busMJcount] =classbox.getText();
          p.busMJpAge[busMJcount] = agebox.getText();
          p.busMJpfare[busMJcount] = faretext.getText();
          
          passname.setText(p.busMJp[busMJcount]);
           passname1.setText(p.busMJp[busMJcount]);
        //class
           typeFlight.setText(p.busMJpclass[busMJcount]);
           typeFlight1.setText(p.busMJpclass[busMJcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMJcount;
            seat1.setText(String.valueOf(busMJcount));
            seat2.setText(String.valueOf(busMJcount));
            typeFlight5.setText("MJB00" + String.valueOf(busMJcount));
          
          
          }
        }
        if (d==7) //JAPAN TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regJMp[regJMcount] =namebox.getText();
          p.regJMpclass[regJMcount] =classbox.getText();
          p.regJMpAge[regJMcount] = agebox.getText();
          p.regJMpfare[regJMcount] = faretext.getText();
          
          passname.setText(p.regJMp[regJMcount]);
           passname1.setText(p.regJMp[regJMcount]);
        //class
           typeFlight.setText(p.regJMpclass[regJMcount]);
           typeFlight1.setText(p.regJMpclass[regJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regJMcount;
            seat1.setText(String.valueOf(regJMcount));
            seat2.setText(String.valueOf(regJMcount));
            typeFlight5.setText("JMR00" + String.valueOf(regJMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priJMp[priJMcount] =namebox.getText();
          p.priJMpclass[priJMcount] =classbox.getText();
          p.priJMpAge[priJMcount] = agebox.getText();
          p.priJMpfare[priJMcount] = faretext.getText();
          
          passname.setText(p.priJMp[priJMcount]);
           passname1.setText(p.priJMp[priJMcount]);
        //class
           typeFlight.setText(p.priJMpclass[priJMcount]);
           typeFlight1.setText(p.priJMpclass[priJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priJMcount;
            seat1.setText(String.valueOf(priJMcount));
            seat2.setText(String.valueOf(priJMcount));
            typeFlight5.setText("JMP00" + String.valueOf(priJMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busJMp[busJMcount] =namebox.getText();
          p.busJMpclass[busJMcount] =classbox.getText();
          p.busJMpAge[busJMcount] = agebox.getText();
          p.busJMpfare[busJMcount] = faretext.getText();
          
          passname.setText(p.busJMp[busJMcount]);
           passname1.setText(p.busJMp[busJMcount]);
        //class
           typeFlight.setText(p.busJMpclass[busJMcount]);
           typeFlight1.setText(p.busJMpclass[busJMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busJMcount;
            seat1.setText(String.valueOf(busJMcount));
            seat2.setText(String.valueOf(busJMcount));
            typeFlight5.setText("JMB00" + String.valueOf(busJMcount));
          
          
          }
        }
        if (d==8) //MANILA TO VIETNAM
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regMVp[regMVcount] =namebox.getText();
          p.regMVpclass[regMVcount] =classbox.getText();
          p.regMVpAge[regMVcount] = agebox.getText();
          p.regMVpfare[regMVcount] = faretext.getText();
          
          passname.setText(p.regMVp[regMVcount]);
           passname1.setText(p.regMVp[regMVcount]);
        //class
           typeFlight.setText(p.regMVpclass[regMVcount]);
           typeFlight1.setText(p.regMVpclass[regMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regMVcount;
            seat1.setText(String.valueOf(regMVcount));
            seat2.setText(String.valueOf(regMVcount));
            typeFlight5.setText("MVR00" + String.valueOf(regMVcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priMVp[priMVcount] =namebox.getText();
          p.priMVpclass[priMVcount] =classbox.getText();
          p.priMVpAge[priMVcount] = agebox.getText();
          p.priMVpfare[priMVcount] = faretext.getText();
          
          passname.setText(p.priMVp[priMVcount]);
           passname1.setText(p.priMVp[priMVcount]);
        //class
           typeFlight.setText(p.priMVpclass[priMVcount]);
           typeFlight1.setText(p.priMVpclass[priMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priMVcount;
            seat1.setText(String.valueOf(priMVcount));
            seat2.setText(String.valueOf(priMVcount));
            typeFlight5.setText("MVP00" + String.valueOf(priMVcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busMVp[busMVcount] =namebox.getText();
          p.busMVpclass[busMVcount] =classbox.getText();
          p.busMVpAge[busMVcount] = agebox.getText();
          p.busMVpfare[busMVcount] = faretext.getText();
          
          passname.setText(p.busMVp[busMVcount]);
           passname1.setText(p.busMVp[busMVcount]);
        //class
           typeFlight.setText(p.busMVpclass[busMVcount]);
           typeFlight1.setText(p.busMVpclass[busMVcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busMVcount;
            seat1.setText(String.valueOf(busMVcount));
            seat2.setText(String.valueOf(busMVcount));
            typeFlight5.setText("MVB00" + String.valueOf(busMVcount));
          
          
          }
        }
        if (d==9) //VIETNAM TO MANILA
        {
          if (classbox.getText()=="REGULAR CLASS")
          {
          p.regVMp[regVMcount] =namebox.getText();
          p.regVMpclass[regVMcount] =classbox.getText();
          p.regVMpAge[regVMcount] = agebox.getText();
          p.regVMpfare[regVMcount] = faretext.getText();
          
          passname.setText(p.regVMp[regVMcount]);
           passname1.setText(p.regVMp[regVMcount]);
        //class
           typeFlight.setText(p.regVMpclass[regVMcount]);
           typeFlight1.setText(p.regVMpclass[regVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++regVMcount;
            seat1.setText(String.valueOf(regVMcount));
            seat2.setText(String.valueOf(regVMcount));
            typeFlight5.setText("VMR00" + String.valueOf(regVMcount));
          
          
          }
          
          if (classbox.getText()=="PRIVATE CLASS")
          {
          p.priVMp[priVMcount] =namebox.getText();
          p.priVMpclass[priVMcount] =classbox.getText();
          p.priVMpAge[priVMcount] = agebox.getText();
          p.priVMpfare[priVMcount] = faretext.getText();
          
          passname.setText(p.priVMp[priVMcount]);
           passname1.setText(p.priVMp[priVMcount]);
        //class
           typeFlight.setText(p.priVMpclass[priVMcount]);
           typeFlight1.setText(p.priVMpclass[priVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++priVMcount;
            seat1.setText(String.valueOf(priVMcount));
            seat2.setText(String.valueOf(priVMcount));
            typeFlight5.setText("VMP00" + String.valueOf(priVMcount));
          
          
          }
          if (classbox.getText()=="BUSINESS CLASS")
          {
          p.busVMp[busVMcount] =namebox.getText();
          p.busVMpclass[busVMcount] =classbox.getText();
          p.busVMpAge[busVMcount] = agebox.getText();
          p.busVMpfare[busVMcount] = faretext.getText();
          
          passname.setText(p.busVMp[busVMcount]);
           passname1.setText(p.busVMp[busVMcount]);
        //class
           typeFlight.setText(p.busVMpclass[busVMcount]);
           typeFlight1.setText(p.busVMpclass[busVMcount]);
        //destination
           destinationL.setText(dest.destination[d]);
        
           
          ++busVMcount;
            seat1.setText(String.valueOf(busVMcount));
            seat2.setText(String.valueOf(busVMcount));
            typeFlight5.setText("VMB00" + String.valueOf(busVMcount));
          
          
          }
        }
        
     
        MAINPanel.setVisible(false);
        PassengerPanel1.setVisible(false);
        DestinationPanel.setVisible(false); 
        TransactionPanel.setVisible(true);
    
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AIRLINE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AIRLINE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AIRLINE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AIRLINE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AIRLINE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DestinationPanel;
    private javax.swing.JLabel FlightcodeLabel;
    private javax.swing.JLabel FlightcodeLabel1;
    private javax.swing.JPanel MAINPanel;
    private javax.swing.JButton Panel3;
    private javax.swing.JPanel PassengerPanel1;
    private javax.swing.JPanel PassengerPanel2;
    private javax.swing.JPanel TransactionPanel;
    private javax.swing.JTextField agebox;
    private javax.swing.JTextField agebox1;
    private javax.swing.JLabel barcodeH;
    private javax.swing.JLabel barcodeV;
    private javax.swing.JLabel classbox;
    private javax.swing.JLabel classbox1;
    private javax.swing.JLabel destinationL;
    private javax.swing.JLabel faretext;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField namebox;
    private javax.swing.JTextField namebox1;
    private javax.swing.JLabel passname;
    private javax.swing.JLabel passname1;
    private javax.swing.JLabel seat1;
    private javax.swing.JLabel seat2;
    private javax.swing.JLabel timelabel;
    private javax.swing.JLabel typeFlight;
    private javax.swing.JLabel typeFlight1;
    private javax.swing.JLabel typeFlight4;
    private javax.swing.JLabel typeFlight5;
    // End of variables declaration//GEN-END:variables
   class RoundedPanel extends JPanel
    {
        private Color backgroundColor;
        private int cornerRadius = 15;

        public RoundedPanel(LayoutManager layout, int radius) {
            super(layout);
            cornerRadius = radius;
        }

        public RoundedPanel(LayoutManager layout, int radius, Color bgColor) {
            super(layout);
            cornerRadius = radius;
            backgroundColor = bgColor;
        }

        public RoundedPanel(int radius) {
            super();
            cornerRadius = radius;
        }

        public RoundedPanel(int radius, Color bgColor) {
            super();
            cornerRadius = radius;
            backgroundColor = bgColor;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Dimension arcs = new Dimension(cornerRadius, cornerRadius);
            int width = getWidth();
            int height = getHeight();
            Graphics2D graphics = (Graphics2D) g;
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

            //Draws the rounded panel with borders.
            if (backgroundColor != null) {
                graphics.setColor(backgroundColor);
            } else {
                graphics.setColor(getBackground());
            }
            graphics.fillRoundRect(0, 0, width-1, height-1, arcs.width, arcs.height); //paint background
            graphics.setColor(getForeground());
            graphics.drawRoundRect(0, 0, width-1, height-1, arcs.width, arcs.height); //paint border
        }
    }
}





